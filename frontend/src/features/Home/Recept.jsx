import { jsPDF } from "jspdf";

const Receipt = ({ data, getExpenseFormat }) => {
  const generatePDFReceipt = () => {
    if (!data || data.length === 0) {
      alert("No data available to generate the report!");
      return;
    }

    const doc = new jsPDF();
    const lineHeight = 10;
    const pageHeight = 280;
    const startY = 20;
    let y = startY;

    doc.setFontSize(18);
    doc.text(`Expense Report for ${getExpenseFormat}`, 10, y);
    y += 20;

    data.forEach((item, index) => {
      doc.setFontSize(12);
      doc.text(`Item ${index + 1}:`, 10, y);
      y += lineHeight;
      doc.text(`Category: ${item.category}`, 10, y);
      doc.text(`Amount: Rs${item.amount}`, 70, y);
      y += lineHeight;
      doc.text(`Date: ${new Date(item.createdAt).toLocaleDateString()}`, 10, y);
      y += 2 * lineHeight;

      if (y + lineHeight > pageHeight) {
        doc.addPage();
        y = startY;
      }
    });

    const totalAmount = data.reduce((sum, item) => sum + item.amount, 0);
    if (y + lineHeight > pageHeight) {
      doc.addPage(); // Add a new page if required
      y = startY;
    }
    doc.setFontSize(14);
    doc.text(`Total Amount: Rs${totalAmount}`, 10, y);
    y += lineHeight * 2;

    // Footer
    doc.setFontSize(10);
    doc.text("Generated by Expense Tracker App", 10, 290);

    // Save the PDF with a dynamic file name
    doc.save(`Expenses_Report_${getExpenseFormat}.pdf`);
  };

  return (
    <div className="mt-5 w-fit mx-auto">
      <button
        onClick={generatePDFReceipt}
        className="bg-green-800 text-white font-semibold py-2 px-3 rounded-md hover:bg-green-900 transition duration-300 cursor-pointer"
      >
        Download Expense Report
      </button>
    </div>
  );
};

export default Receipt;
